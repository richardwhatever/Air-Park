# .github/workflows/build-domains.yml
name: Build domains.json from Airtable

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      AT_BASE: appxLxgRbkXd31y9w
      AT_TABLE: Domains
      # AT_VIEW: Grid view   # optional
    steps:
      - uses: actions/checkout@v4

      - name: Fetch Airtable -> data/domains.json
        env:
          AIRTABLE_TOKEN: ${{ secrets.AIRTABLE_TOKEN }}
        run: |
          set -euo pipefail
          mkdir -p data
          python3 - <<'PY'
          import json, os, urllib.parse, urllib.request

          BASE   = os.environ["AT_BASE"]
          TABLE  = os.environ["AT_TABLE"]
          VIEW   = os.environ.get("AT_VIEW")
          TOKEN  = os.environ["AIRTABLE_TOKEN"]

          def q(s): return urllib.parse.quote(s)

          def fetch_all(base, table, view=None):
              api = f"https://api.airtable.com/v0/{base}/{q(table)}"
              params = "?pageSize=100"
              if view:
                  params += f"&view={q(view)}"
              headers = { "Authorization": f"Bearer {TOKEN}" }
              out = []
              url = api + params
              while True:
                  req = urllib.request.Request(url, headers=headers)
                  with urllib.request.urlopen(req) as resp:
                      data = json.loads(resp.read().decode("utf-8"))
                  out.extend(data.get("records", []))
                  off = data.get("offset")
                  if not off: break
                  url = api + params + "&offset=" + q(off)
              return out

          records = fetch_all(BASE, TABLE, VIEW)

          out_map = {}
          skipped = 0
          for r in records:
              f = r.get("fields", {})
              dn = (f.get("DomainName") or "").strip().lower()
              if not dn:
                  continue

              price = (f.get("Sell Price") or "").strip()
              note  = (f.get("Sell Note") or "").strip()
              group = (f.get("Domain Group") or "").strip()
              seo   = (f.get("SEO Keywords") or "").strip()
              uses  = (f.get("Use-cases") or "").strip()

              if not any([price, note, group, seo, uses]):
                  skipped += 1
                  continue

              out_map[dn] = {
                  "price": price,
                  "note": note,
                  "domain-group": group,
                  "seo-keywords": seo,
                  "use-cases": uses,
              }

          with open("data/domains.json","w",encoding="utf-8") as fp:
              json.dump(out_map, fp, ensure_ascii=False, indent=2)
          PY

      - name: Preview JSON
        run: head -n 30 data/domains.json || true

      - name: Commit & push
        run: |
          git config user.name "github-actions"
          git config user.email "actions@users.noreply.github.com"
          git add data/domains.json
          git diff --cached --quiet && { echo "No changes"; exit 0; }
          git commit -m "Update domains.json from Airtable"
          git push
